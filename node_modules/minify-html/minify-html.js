const UglifyJS = require("uglify-es")
function minify_js(str) {
  return UglifyJS.minify(str).code
}
const CleanCSS = require('clean-css')
function minify_css(str) {
  var output = new CleanCSS({/* options */}).minify(str).styles;
  return output
}
var minify_html = function(str) {
  function removeComments(str) {
    // Nested comments can't be handled properly, it would take a lexer/parser(?) to do that
    str = str.replace(/<!--[\s\S]*?-->/g, '')
    return str
  }
  function minifyCSS(str) {
    // minify_css within <style> tags
    str = str.replace(/\<style\>[\s\S]*?\<\/style\>/g, function(match) {
      match = '<style>' + minify_css(match.substring(7, match.length-8)) +  '</style>'
      return match
    })
    // minify_css within style attributes
    str = str.replace(/style=["'][\s\S*]*?["']/g, function(match) {
      let minified = minify_css('p{' + match.substring(7, match.length-1) + '}') // inserting code in a p{...} in order to fool clean-css
      match = 'style=' + match.charAt(6) + minified.substring(2, minified.length-1) + match.charAt(6) // Keeping single or double quotes unchanged
      return match
    })
    // TODO: minify_js within onclick=" " etc attributes (anything starting with "on" maybe?)
    return str
  }
  function minifyJS(str) {
    // minify_js within <script> tags
    str = str.replace(/\<script\>[\s\S]*?\<\/script\>/g, function(match) {
      match = '<script>' + minify_js(match.substring(9, match.length-9)) +  '</script>'
      return match
    })
    return str
  }
  function removeWhitespace(str) {
    str = str.trim()
    // double/multi spaces to single
    str = str.replace(/[^\S\r\n]+/g, ' ')
    // collapse everything to a single line
    str = str.replace(/\s*\n+\s*/g, '')
    return str
  }
  str = removeComments(str)
  str = minifyCSS(str)
  str = minifyJS(str)
  str = removeWhitespace(str)
  return str
}

exports.minify = minify_html